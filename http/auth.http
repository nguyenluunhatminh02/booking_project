	# API Test Suite (.http) — generated 2025-09-15 13:29:46
# Tooling: VS Code "REST Client" extension (humao.rest-client) or IntelliJ HTTP Client
# Tips:
#  - Enable cookie jar in VSCode: `"rest-client.rememberCookiesForSubsequentRequests": true`
#  - You can run each request by clicking "Send Request" above it.
#  - Adjust paths to match your controllers if different.
#  - This suite supports both Bearer-token and cookie-based flows (CSRF). Use what your app uses.

@env = local
# ---- Environments ----
# Change @env to dev/prod and adjust variables below.
# local
@if env == "local"
@baseUrl = http://localhost:3000
@feOrigin = http://localhost:5173
@adminEmail = admin@example.com
@adminPassword = P@ssw0rd123
@userEmail = user{$randomInt 1000 99999}@example.com
@userPassword = P@ssw0rd123

# dev (example)
@if env == "dev"
@baseUrl = https://api.dev.yourdomain.com
@feOrigin = https://app.dev.yourdomain.com
@adminEmail = admin@yourdomain.com
@adminPassword = <fill>
@userEmail = <fill>
@userPassword = <fill>

# prod (example)
@if env == "prod"
@baseUrl = https://api.yourdomain.com
@feOrigin = https://app.yourdomain.com
@adminEmail = admin@yourdomain.com
@adminPassword = <fill>
@userEmail = <fill>
@userPassword = <fill>

### -------------------------------------------------------------
### Health / Ops
### -------------------------------------------------------------

### Health (liveness)
GET {baseUrl}/livez

### Readiness (db+redis)
GET {baseUrl}/readyz

### Metrics (Prometheus)
GET {baseUrl}/metrics

### API Info (if any / root)
GET {baseUrl}/

### -------------------------------------------------------------
### CSRF (only if cookie-based auth is enabled)
### -------------------------------------------------------------

### Get CSRF token (may set cookie __Host-csrf or return token)
GET {baseUrl}/csrf/token
Origin: {feOrigin}

### Example POST requiring CSRF header (if your server requires it)
# Replace X-CSRF-Token with actual token if not using cookie mode.
POST {baseUrl}/echo
Content-Type: application/json
X-CSRF-Token: {csrfToken}

{
  "echo": "ping"
}

### -------------------------------------------------------------
### Auth — Register / Login / Me
### -------------------------------------------------------------

### Register new user (if open in your env)
POST {baseUrl}/auth/register
Content-Type: application/json

{
  "email": "{userEmail}",
  "password": "{userPassword}",
  "name": "User {userEmail}"
}

### Login
# Expects response: accessToken, refreshToken (or cookies), session info
POST {baseUrl}/auth/login
Content-Type: application/json

{
  "email": "{adminEmail}",
  "password": "{adminPassword}"
}

> {
  // Parse tokens and set globals for subsequent requests (VSCode REST Client)
  const body = JSON.parse(response.body || '{}');
  const data = body.data || body || {};
  const at = data.accessToken || data.access_token || data.token || '';
  const rt = data.refreshToken || data.refresh_token || '';
  const sid = data.sessionId || (data.session && data.session.id) || '';
  const uid = data.userId || (data.user && data.user.id) || '';
  client.global.set("accessToken", at);
  client.global.set("refreshToken", rt);
  client.global.set("sessionId", sid);
  client.global.set("userId", uid);
  client.log("Set accessToken, refreshToken, sessionId, userId");
}

### Me (Bearer)
GET {baseUrl}/auth/me
Authorization: Bearer {accessToken}

### Refresh (Bearer + body)
POST {baseUrl}/auth/refresh
Content-Type: application/json

{
  "refreshToken": "{refreshToken}"
}

> {
  const body = JSON.parse(response.body || '{}');
  const data = body.data || body || {};
  const at = data.accessToken || data.access_token || '';
  const rt = data.refreshToken || data.refresh_token || '';
  if (at) client.global.set("accessToken", at);
  if (rt) client.global.set("refreshToken", rt);
  client.log("Rotated tokens (if provided).");
}

### Logout current (access token)
POST {baseUrl}/auth/logout
Authorization: Bearer {accessToken}

### Logout all sessions for current user
POST {baseUrl}/auth/logout-all
Authorization: Bearer {accessToken}

### Sessions list (current user)
GET {baseUrl}/auth/sessions
Authorization: Bearer {accessToken}

### Revoke specific session by sessionId (if supported)
POST {baseUrl}/auth/revoke
Authorization: Bearer {accessToken}
Content-Type: application/json

{
  "sessionId": "{sessionId}"
}

### Approve device (paste token from email/logs)
GET {baseUrl}/auth/approve-device?token={deviceApprovalToken}

### -------------------------------------------------------------
### MFA (TOTP / Backup Codes)
### -------------------------------------------------------------

### MFA Setup (generate secret/qr)
POST {baseUrl}/mfa/setup
Authorization: Bearer {accessToken}

### MFA Verify setup (one-time TOTP code)
POST {baseUrl}/mfa/verify-setup
Authorization: Bearer {accessToken}
Content-Type: application/json

{
  "code": "{totpCode}"
}

### MFA Challenge (after login if required)
POST {baseUrl}/mfa/challenge
Content-Type: application/json

{
  "email": "{adminEmail}"
}

### MFA Verify (complete challenge)
POST {baseUrl}/mfa/verify
Content-Type: application/json

{
  "email": "{adminEmail}",
  "code": "{totpCode}"
}

### MFA Disable
POST {baseUrl}/mfa/disable
Authorization: Bearer {accessToken}

### Backup codes — generate/regenerate
POST {baseUrl}/mfa/backup-codes
Authorization: Bearer {accessToken}

### Backup codes — list
GET {baseUrl}/mfa/backup-codes
Authorization: Bearer {accessToken}

### -------------------------------------------------------------
### RBAC (Roles / Permissions)
### -------------------------------------------------------------

### My permissions
GET {baseUrl}/rbac/permissions/me
Authorization: Bearer {accessToken}

### Assign role to a user (admin only)
POST {baseUrl}/rbac/assign-role
Authorization: Bearer {accessToken}
Content-Type: application/json

{
  "userId": "{userId}",
  "role": "ADMIN"
}

### Revoke role from a user (admin only)
POST {baseUrl}/rbac/revoke-role
Authorization: Bearer {accessToken}
Content-Type: application/json

{
  "userId": "{userId}",
  "role": "ADMIN"
}

### -------------------------------------------------------------
### Security Events / Audit
### -------------------------------------------------------------

### List security events (filter by type or date if supported)
GET {baseUrl}/security/events?limit=20
Authorization: Bearer {accessToken}

### -------------------------------------------------------------
### Example Protected Resource (adjust path to your domain module)
### -------------------------------------------------------------

### Example: Get my profile
GET {baseUrl}/users/me
Authorization: Bearer {accessToken}

### Example: Update my profile
PATCH {baseUrl}/users/me
Authorization: Bearer {accessToken}
Content-Type: application/json

{
  "name": "Updated Name"
}