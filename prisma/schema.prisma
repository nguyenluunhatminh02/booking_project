// ===========================
// Prisma Schema - Booking App
// ===========================

// ---------- Generators / Datasource ----------
generator client {
  provider          = "prisma-client-js"
  previewFeatures   = ["postgresqlExtensions"]
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  // Bật citext để dùng @db.Citext cho email/promo code…
  extensions = [citext(map: "citext")]
}

// ---------- Enums ----------
enum ACLEffect { 
  ALLOW 
  DENY 
}

enum PromotionType { 
  PERCENT 
  FIXED 
}

enum RiskLevel { 
  LOW 
  MEDIUM 
  HIGH
} // dùng cho FraudAssessment.level

enum FraudDecision { 
  PENDING 
  APPROVED 
  REJECTED 
  AUTO_DECLINED 
}

enum SessionRevokeReason { 
  USER_LOGOUT 
  ADMIN_FORCE 
  SECURITY_REUSE 
  EXPIRED 
  OTHER 
}

enum SecurityEventType { 
  LOGIN_SUCCESS 
  LOGIN_FAILED 
  TOKEN_REVOKE 
  REFRESH_REUSE 
}

enum UserTokenType { 
  EMAIL_VERIFY 
  PASSWORD_RESET 
  DEVICE_APPROVAL 
}

enum PaymentStatus { 
  PENDING 
  SUCCEEDED 
  FAILED 
  REFUNDED
}

enum BookingStatus { 
  HOLD 
  PAID 
  CANCELLED 
  REFUNDED 
  CONFIRMED 
  REVIEW 
}

/// Lịch sử sử dụng promotion (giúp chống race & hoàn trả)
enum RedemptionStatus { 
  RESERVED 
  APPLIED 
  RELEASED 
}

enum IdemStatus { 
  IN_PROGRESS 
  COMPLETED 
  FAILED 
}

// ---------- Idempotency ----------
model Idempotency {
  id           String     @id @default(uuid())
  userId       String?
  endpoint     String      // ví dụ: "POST /bookings/hold"
  key          String      // từ header: Idempotency-Key
  requestHash  String      // sha256(payload quan trọng)
  status       IdemStatus  @default(IN_PROGRESS)
  resourceId   String?     // bookingId / paymentId...
  response     Json?
  error        Json?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  expiresAt    DateTime

  @@unique([userId, endpoint, key]) // scope theo user + endpoint + key
  @@index([endpoint, createdAt])
  @@index([expiresAt])
}

// ---------- Core: Users & Sessions ----------
model User {
  id            String   @id @default(uuid())
  email         String   @unique @db.Citext
  password      String
  accessVersion Int      @default(1)
  lockedUntil   DateTime?

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // relations
  sessions        UserSession[]
  roles           UserRole[]
  securityEvents  SecurityEvent[]
  auditLogs       AuditLog[]
  properties      Property[]       @relation("HostProperties")
  bookings        Booking[]        @relation("CustomerBookings")
  tokens          UserToken[]

  // others
  ResourceACL     ResourceACL[]
  UserMfa         UserMfa[]
  BackupCode      BackupCode[]
  FraudAssessment FraudAssessment[]
  Review          Review[]

  @@map("users")
}

model UserSession {
  id              String   @id @default(uuid())
  userId          String
  deviceId        String?
  refreshHash     String
  tokenVersion    Int      @default(0)
  accessSv        Int      @default(1)
  expiresAt       DateTime
  revokedAt       DateTime?
  revokedReason   SessionRevokeReason?

  // observability / forensics
  ip              String?  @db.Inet
  userAgent       String?

  deviceFp        String?
  approved        Boolean   @default(true)

  lastUsedAt      DateTime?
  rotatedAt       DateTime?
  reusedAt        DateTime?

  // rotate grace window
  prevRefreshHash String?
  prevExpiresAt   DateTime?

  createdAt       DateTime @default(now())

  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  securityEvents  SecurityEvent[]

  @@index([userId])
  @@index([expiresAt])
  @@index([userId, revokedAt])
  @@map("user_sessions")
}

// ---------- RBAC ----------
model Role {
  id        String   @id @default(uuid())
  name      String   @unique
  desc      String?
  isSystem  Boolean  @default(false)
  createdAt DateTime @default(now())

  rolePerms RolePermission[]
  userRoles UserRole[]

  @@map("roles")
}

model Permission {
  id        String   @id @default(uuid())
  action    String
  subject   String
  desc      String?
  createdAt DateTime @default(now())

  rolePerms RolePermission[]

  @@unique([action, subject], name: "action_subject")
  @@map("permissions")
}

model RolePermission {
  roleId       String
  permissionId String
  createdAt    DateTime @default(now())

  role        Role        @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission  Permission  @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
  @@map("role_permissions")
}

model UserRole {
  id          String    @id @default(uuid())
  userId      String
  roleId      String
  effectiveAt DateTime?
  expiresAt   DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId], name: "user_role_unique")
  @@map("user_roles")
}

// ---------- Instance-level ACL ----------
model ResourceACL {
  id           String    @id @default(uuid())
  userId       String
  resourceType String
  resourceId   String
  action       String
  effect       ACLEffect @default(ALLOW)
  createdAt    DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, resourceType, resourceId, action], name: "user_resource_action_unique")
  @@index([resourceType, resourceId])
  @@map("resource_acl")
}

// ---------- Audit & Security ----------
model SecurityEvent {
  id        String            @id @default(uuid())
  userId    String?
  sessionId String?
  type      SecurityEventType
  ip        String?  @db.Inet
  userAgent String?
  deviceFp  String?
  meta      Json?
  createdAt DateTime          @default(now())

  user    User?        @relation(fields: [userId], references: [id], onDelete: SetNull)
  session UserSession? @relation(fields: [sessionId], references: [id], onDelete: SetNull)

  @@index([userId, createdAt])
  @@index([userId, type, createdAt])
  @@index([sessionId])
  @@map("security_events")
}

model AuditLog {
  id        String   @id @default(uuid())
  actorId   String?
  action    String
  entity    String
  entityId  String?
  meta      Json?
  createdAt DateTime @default(now())

  actor User? @relation(fields: [actorId], references: [id], onDelete: SetNull)

  @@index([entity, entityId, createdAt])
  @@map("audit_logs")
}

// ---------- Feature Flags ----------
model FeatureFlag {
  key       String   @id
  enabled   Boolean  @default(false)
  payload   Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ---------- Domain ----------
model Property {
  id          String    @id @default(uuid())
  hostId      String
  title       String
  address     String
  description String?

  // Geo
  lat         Float?    @db.DoublePrecision
  lng         Float?    @db.DoublePrecision

  // Amenities JSONB
  amenities   Json?     @default(dbgenerated("'{}'::jsonb"))

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  host        User      @relation("HostProperties", fields: [hostId], references: [id], onDelete: Cascade)
  availability AvailabilityDay[]
  bookings    Booking[]
  photos      Photo[]
  reviews     Review[]

  @@index([hostId])
}

model AvailabilityDay {
  id          String    @id @default(uuid())
  propertyId  String
  date        DateTime  // ngày (UTC 00:00)
  price       Int
  remaining   Int
  isBlocked   Boolean   @default(false)

  property    Property  @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@unique([propertyId, date])
  @@index([propertyId, date])
}

model Booking {
  id                 String        @id @default(uuid())
  propertyId         String
  customerId         String
  checkIn            DateTime
  checkOut           DateTime
  status             BookingStatus @default(HOLD)
  totalPrice         Int
  promoCode          String?       @db.Citext
  holdExpiresAt      DateTime?
  discountAmount     Int           @default(0)   // final = totalPrice - discountAmount

  // Promotion áp dụng (snapshot liên kết)
  appliedPromotionId  String?
  appliedPromotion    Promotion?   @relation(fields: [appliedPromotionId], references: [id])

  // (Tuỳ chọn) Chính sách huỷ/hoàn
  cancelPolicyId       String?
  cancelPolicy         CancelPolicy? @relation(fields: [cancelPolicyId], references: [id])
  cancelPolicySnapshot Json?

  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt

  property           Property      @relation(fields: [propertyId], references: [id], onDelete: Restrict)
  customer           User          @relation("CustomerBookings", fields: [customerId], references: [id], onDelete: Restrict)
  payment            Payment?

  // NEW: deadline cho reviewer (tuỳ chọn)
  reviewDeadlineAt   DateTime?

  // REVIEW: 1–1 (đổi từ mảng sang đơn)
  fraudAssessment    FraudAssessment?

  PromotionRedemption  PromotionRedemption[]

  @@index([propertyId])
  @@index([customerId])
  @@index([checkIn, checkOut])
  @@index([propertyId, status])
  @@index([status, holdExpiresAt])      // phục vụ saga expire
  @@index([status, reviewDeadlineAt])   // SLA review (tuỳ chọn)
}

model FraudAssessment {
  id          String        @id @default(uuid())
  bookingId   String        @unique
  userId      String
  score       Int
  level       RiskLevel
  decision    FraudDecision @default(PENDING)
  reasons     Json
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Audit
  reviewedById String?
  reviewedAt   DateTime?
  reviewedNote String?

  reviewer     User?        @relation(fields: [reviewedById], references: [id], onDelete: SetNull)
  booking      Booking      @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([level, decision])
}

model PromotionRedemption {
  id           String           @id @default(uuid())
  promotionId  String
  bookingId    String           @unique // 1 booking ↔ 1 redemption
  userId       String

  code         String           // snapshot code lúc dùng
  amount       Int
  status       RedemptionStatus @default(RESERVED)

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  promotion    Promotion @relation(fields: [promotionId], references: [id], onDelete: Restrict)
  booking      Booking   @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@index([promotionId, status])
  @@index([userId])
  // @@unique([promotionId, userId]) // nếu muốn giới hạn 1 user / 1 promo
}

model Payment {
  id              String        @id @default(uuid())
  bookingId       String        @unique
  amount          Int
  provider        String        // "MOCK", "VNPay", "MoMo", "Stripe", ...
  status          PaymentStatus @default(PENDING)
  externalId      String        // id từ cổng thanh toán

  // (tuỳ chọn) theo dõi hoàn tiền
  refundAmount     Int?
  refundExternalId String?

  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  booking         Booking       @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@unique([provider, externalId])
}

model Photo {
  id         String    @id @default(uuid())
  propertyId String
  bucket     String
  objectKey  String
  createdAt  DateTime  @default(now())

  property   Property  @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@unique([bucket, objectKey])
  @@index([propertyId])
}

model Promotion {
  id          String         @id @default(uuid())
  code        String         @db.Citext @unique
  type        PromotionType
  value       Int            // percent: 5..100; fixed: VND
  validFrom   DateTime?
  validTo     DateTime?
  minNights   Int?
  minTotal    Int?
  usageLimit  Int?
  usedCount   Int            @default(0)
  isActive    Boolean        @default(true)

  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  redemptions PromotionRedemption[]
  bookings    Booking[]

  @@index([isActive, validFrom, validTo])
}

model Review {
  id         String    @id @default(uuid())
  propertyId String
  userId     String
  rating     Int
  comment    String?
  createdAt  DateTime  @default(now())

  property   Property  @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([propertyId])
}

// ---------- Cancel Policy (pluggable) ----------
model CancelPolicy {
  id           String   @id @default(uuid())
  name         String
  isActive     Boolean  @default(true)
  // Mảng rule: [{beforeDays:int, refundPercent:int}, ...]
  rules        Json
  // Tuỳ chọn tính theo giờ địa phương chính xác
  checkInHour  Int?
  cutoffHour   Int?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  bookings     Booking[]
}

// ---------- One-time Tokens / MFA ----------
model UserToken {
  id        String        @id @default(uuid())
  userId    String?
  type      UserTokenType
  tokenHash String
  meta      Json?
  createdAt DateTime      @default(now())
  expiresAt DateTime
  usedAt    DateTime?
  usedByIp  String? @db.Inet

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([type, expiresAt])
  @@index([userId, type, createdAt])
  @@map("user_tokens")
}

model UserMfa {
  id                String   @id @default(uuid())
  userId            String   @unique
  totpSecret        String
  enabled           Boolean  @default(false)
  verifiedAt        DateTime?
  verifyAttempts    Int      @default(0)
  lastVerifyAt      DateTime?
  recoveryKeyHash   String?
  recoveryKeyUsedAt DateTime?
  createdAt         DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_mfa")
}

model BackupCode {
  id        String   @id @default(uuid())
  userId    String
  codeHash  String
  usedAt    DateTime?

  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, usedAt])
  @@map("backup_codes")
}

// ---------- Outbox (Debezium style) & Processed Event ----------
model Outbox {
  id        String   @id @default(uuid())
  eventKey  String?
  topic     String
  payload   Json
  createdAt DateTime @default(now())

  @@index([topic, createdAt])
}

model ProcessedEvent {
  id        String   @id        // Debezium message key/offset hoặc header id
  handledAt DateTime @default(now())
}
