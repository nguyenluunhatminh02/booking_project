// ===========================
// Generators / Datasource
// ===========================
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------- Enums ----------
enum ACLEffect { 
  ALLOW 
  DENY 
}

enum SessionRevokeReason { 
  USER_LOGOUT 
  ADMIN_FORCE 
  SECURITY_REUSE 
  EXPIRED 
  OTHER 
}

enum SecurityEventType { 
  LOGIN_SUCCESS 
  LOGIN_FAILED 
  TOKEN_REVOKE 
  REFRESH_REUSE 
}

enum BookingStatus { 
  PENDING 
  CONFIRMED 
  CANCELED 
}
enum UserTokenType { 
  EMAIL_VERIFY 
  PASSWORD_RESET 
  DEVICE_APPROVAL 
}

// ---------- Core: Users & Sessions ----------
model User {
  id            String   @id @default(uuid())
  email         String   @unique @db.Citext
  password      String
  accessVersion Int      @default(1)     // bump ⇒ invalidate all access tokens
  lockedUntil   DateTime?

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // relations
  sessions        UserSession[]
  roles           UserRole[]
  securityEvents  SecurityEvent[]
  auditLogs       AuditLog[]
  properties      Property[]   @relation("PropertyOwner")
  bookings        Booking[]
  tokens          UserToken[]

  @@map("users")
  ResourceACL ResourceACL[]
  UserMfa UserMfa[]
  BackupCode BackupCode[]
}

model UserSession {
  id              String   @id @default(uuid())
  userId          String
  deviceId        String?
  refreshHash     String
  tokenVersion    Int      @default(0)
  accessSv     Int      @default(1)
  expiresAt       DateTime
  revokedAt       DateTime?
  revokedReason   SessionRevokeReason?

  // observability / forensics
  ip              String?  // prefer @db.Inet if supported by your Prisma
  userAgent       String?

  deviceFp        String?   // fingerprint từ FE (tuỳ bạn)
  approved        Boolean   @default(true) // false => cần device approval flow

  lastUsedAt      DateTime?
  rotatedAt       DateTime?
  reusedAt        DateTime?

  // rotate grace window
  prevRefreshHash String?
  prevExpiresAt   DateTime?

  createdAt       DateTime @default(now())
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  securityEvents  SecurityEvent[]

  @@index([userId])
  @@index([expiresAt])
  @@index([userId, revokedAt])
  @@map("user_sessions")
}

// ---------- RBAC (single-tenant, no scope) ----------
model Role {
  id        String   @id @default(uuid())
  name      String   @unique
  desc      String?
  isSystem  Boolean  @default(false)
  createdAt DateTime @default(now())

  rolePerms RolePermission[]
  userRoles UserRole[]

  @@map("roles")
}

model Permission {
  id        String   @id @default(uuid())
  action    String                 // e.g. read, create, update, delete
  subject   String                 // e.g. Property, Booking, SecurityEvent, ...
  desc      String?
  createdAt DateTime @default(now())

  rolePerms RolePermission[]

  @@unique([action, subject], name: "action_subject")
  @@map("permissions")
}

model RolePermission {
  roleId       String
  permissionId String
  createdAt    DateTime @default(now())

  role        Role        @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission  Permission  @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
  @@map("role_permissions")
}

model UserRole {
  id          String    @id @default(uuid())
  userId      String
  roleId      String
  effectiveAt DateTime?
  expiresAt   DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId], name: "user_role_unique")
  @@map("user_roles")
}

// ---------- Instance-level ACL (tuỳ chọn cho ngoại lệ) ----------
model ResourceACL {
  id           String    @id @default(uuid())
  userId       String
  resourceType String    // e.g. Property, Booking
  resourceId   String
  action       String    // e.g. read, update, delete
  effect       ACLEffect @default(ALLOW)
  createdAt    DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, resourceType, resourceId, action], name: "user_resource_action_unique")
  @@index([resourceType, resourceId])
  @@map("resource_acl")
}

// ---------- Audit & Security ----------
model SecurityEvent {
  id        String            @id @default(uuid())
  userId    String?                             // nullable cho LOGIN_FAILED chưa định danh
  sessionId String?
  type      SecurityEventType
  ip        String?
  userAgent String?
  deviceFp    String?   // Changed from deviceFingerprint
  meta      Json?
  createdAt DateTime          @default(now())

  user    User?        @relation(fields: [userId], references: [id], onDelete: SetNull)
  session UserSession? @relation(fields: [sessionId], references: [id], onDelete: SetNull)

  @@index([userId, createdAt])
  @@index([userId, type, createdAt])
  @@index([sessionId])
  @@map("security_events")
}

model AuditLog {
  id        String   @id @default(uuid())
  actorId   String?
  action    String
  entity    String
  entityId  String?
  meta      Json?
  createdAt DateTime @default(now())

  actor User? @relation(fields: [actorId], references: [id], onDelete: SetNull)

  @@index([entity, entityId, createdAt])
  @@map("audit_logs")
}

// ---------- Domain ----------
model Property {
  id          String    @id @default(uuid())
  title       String
  description String?
  ownerId     String

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  owner     User      @relation("PropertyOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  bookings  Booking[]

  @@index([ownerId])
  @@map("properties")
}

model Booking {
  id          String        @id @default(uuid())
  propertyId  String
  userId      String
  status      BookingStatus @default(PENDING)

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  property Property @relation(fields: [propertyId], references: [id], onDelete: Restrict)
  user     User     @relation(fields: [userId], references: [id], onDelete: Restrict)

  @@index([propertyId])
  @@index([userId])
  @@map("bookings")
}

// ---------- One-time Tokens ----------
model UserToken {
  id        String        @id @default(uuid())
  userId    String?
  type      UserTokenType
  tokenHash String        // store hash only (no plaintext)
  meta      Json?
  createdAt DateTime      @default(now())
  expiresAt DateTime
  usedAt    DateTime?
  usedByIp  String?

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([type, expiresAt])
  @@index([userId, type, createdAt])
  @@map("user_tokens")
}



model UserMfa {
  id           String   @id @default(uuid())
  userId       String   @unique
  totpSecret   String   // base32 (encrypted/at-rest nếu có KMS)
  enabled      Boolean  @default(false)
  verifiedAt   DateTime?
  verifyAttempts Int       @default(0)      // Thêm field này
  lastVerifyAt   DateTime? // Thêm field này để track thời gian
  recoveryKeyHash    String?   // Thêm field này để lưu recovery key
  recoveryKeyUsedAt  DateTime? // Track thời gian sử dụng recovery key
  createdAt    DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_mfa")
}

model BackupCode {
  id        String   @id @default(uuid())
  userId    String
  codeHash  String   // store hash (không plaintext)
  usedAt    DateTime?

  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, usedAt])
  @@map("backup_codes")
}