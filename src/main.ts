import { NestFactory } from '@nestjs/core';
import { NestExpressApplication } from '@nestjs/platform-express';
import * as cookieParser from 'cookie-parser';
import { AppModule } from './app.module';
import { Logger } from 'nestjs-pino';
import { ValidationPipe } from '@nestjs/common';
import helmet from 'helmet';
import * as hpp from 'hpp';
import * as bodyParser from 'body-parser';
import * as compression from 'compression';
// N·∫øu b·∫°n d√πng CsrfMiddleware ·ªü AppModule th√¨ KH√îNG c·∫ßn import csurf ·ªü ƒë√¢y
// import * as csurf from 'csurf';
import { TransformInterceptor } from './common/transforms/transform.interceptor';
import { GlobalExceptionFilter } from './common/filters/global-exception.filter';
import { ValidationException } from './common/errors/app.exception';
import { ValidationError } from 'class-validator';
import { ensureTopics } from './modules/kafka/ensure-topics';
// import { CsrfExceptionFilter } from './common/filters/csrf-exception.filter'; // kh√¥ng b·∫Øt ƒë∆∞·ª£c EBADCSRFTOKEN

async function bootstrap() {
  const app = await NestFactory.create<NestExpressApplication>(AppModule, {
    bufferLogs: true,
  });

  if (process.env.KAFKA_BOOTSTRAP === '1') {
    console.log('Waiting for Kafka to be ready...');
    await new Promise((resolve) => setTimeout(resolve, 5000));

    try {
      await ensureTopics();
    } catch (error) {
      console.error('Failed to ensure topics:', error);
    }
  } else {
    console.log('Skipping Kafka topic check (KAFKA_BOOTSTRAP!=1)');
  }
  app.set('trust proxy', 1);

  // C·∫•u h√¨nh ngu·ªìn FE/API t·ª´ env
  const FE_ORIGINS = (process.env.CORS_ORIGINS || 'http://localhost:5173')
    .split(',')
    .map((s) => s.trim())
    .filter(Boolean);

  // D√πng helmet t·ªïng qu√°t + CSP (tr√°nh ph·∫ßn t·ª≠ r·ªóng)
  app.use(helmet());
  app.use(
    helmet.contentSecurityPolicy({
      useDefaults: true,
      directives: {
        defaultSrc: ["'self'"],
        scriptSrc: ["'self'"], // n·∫øu Swagger/UI b·ªã ch·∫∑n, c√¢n nh·∫Øc th√™m 'unsafe-eval' ho·∫∑c per-route CSP
        objectSrc: ["'none'"],
        baseUri: ["'self'"],
        frameAncestors: ["'none'"],
        imgSrc: ["'self'", 'data:'],
        styleSrc: ["'self'", "'unsafe-inline'"], // dev; prod n√™n h·∫°n ch·∫ø h∆°n
        connectSrc: ["'self'", ...FE_ORIGINS], // ‚òÖ tr√°nh ph·∫ßn t·ª≠ r·ªóng
        upgradeInsecureRequests: [], // b·∫≠t directive
      },
    }),
  );

  app.use(hpp());
  app.use(compression({ threshold: 1024 }));
  app.use(cookieParser(process.env.COOKIE_SECRET || 'dev-cookie'));

  // Logger
  app.useLogger(app.get(Logger));

  // CORS ‚Äì ‚òÖ th√™m c√°c header c·∫ßn thi·∫øt
  app.enableCors({
    origin: (origin, cb) => {
      if (!origin) return cb(null, true); // Postman/curl
      if (FE_ORIGINS.includes(origin)) return cb(null, true);
      return cb(new Error('Not allowed by CORS'), false);
    },
    credentials: true,
    methods: ['GET', 'POST', 'PUT', 'PATCH', 'DELETE', 'OPTIONS'],
    allowedHeaders: [
      'Content-Type',
      'Authorization',
      'X-Requested-With',
      'X-CSRF-Token', // ‚òÖ
      'X-XSRF-Token', // ‚òÖ
      'X-Device-Fp', // ‚òÖ n·∫øu b·∫°n g·ª≠i fingerprint t·ª´ FE
      'X-Request-Id', // ‚òÖ n·∫øu client g·ª≠i request-id
    ],
    exposedHeaders: [
      'Content-Length',
      'Content-Type',
      'RateLimit-Limit', // ‚òÖ ƒë·ªÉ FE ƒë·ªçc rate limit
      'RateLimit-Remaining', // ‚òÖ
      'RateLimit-Reset', // ‚òÖ
      'Retry-After', // ‚òÖ
    ],
  });

  // N·∫øu KH√îNG apply CsrfMiddleware trong AppModule, th√¨ b·∫≠t csurf ·ªü ƒë√¢y:
  // app.use(
  //   csurf({
  //     cookie: {
  //       key: '__Host-csrf',
  //       httpOnly: true,
  //       sameSite: 'lax',
  //       secure: process.env.NODE_ENV === 'production',
  //       path: '/',
  //     },
  //     ignoreMethods: ['GET', 'HEAD', 'OPTIONS'],
  //   }),
  // );

  // Express-level handler cho EBADCSRFTOKEN (‚òÖ B·∫ÆT BU·ªòC ƒë·ªÉ tr·∫£ JSON ƒë·∫πp)
  app.use((err, req, res, next) => {
    if (err?.code === 'EBADCSRFTOKEN') {
      return res.status(403).json({
        statusCode: 403,
        message: 'Invalid CSRF token',
        path: req.originalUrl,
        timestamp: new Date().toISOString(),
        code: 'FORBIDDEN',
      });
    }
    return next(err);
  });

  // ‚ù∂ Stripe/MOCK webhook c·∫ßn raw (kh√¥ng parse JSON ·ªü route n√†y)
  app.use('/payments/webhook', bodyParser.raw({ type: '*/*' }));

  // ‚ù∑ C√°c route c√≤n l·∫°i parse JSON nh∆∞ b√¨nh th∆∞·ªùng, ƒë·ªìng th·ªùi gi·ªØ l·∫°i rawBody
  app.use(
    bodyParser.json({
      verify: (req: any, _res, buf) => {
        if (!req.rawBody) req.rawBody = buf;
      },
    }),
  );

  app.useGlobalPipes(
    new ValidationPipe({
      whitelist: true,
      forbidNonWhitelisted: true,
      transform: true,
      exceptionFactory: (errors: ValidationError[]) => {
        const fieldErrors = errors.flatMap((err) => {
          const field = err.property;
          const constraints = err.constraints || {};
          const entries = Object.entries(constraints);
          if (entries.length === 0) return [];
          // map constraint -> code & message
          return entries.map(([, msg]) => ({
            field,
            message: msg,
          }));
        });
        return ValidationException(fieldErrors, 'Validation failed'); // status=422, code=VALIDATION_ERROR
      },
    }),
  );

  app.useGlobalInterceptors(
    new TransformInterceptor({
      customSensitiveFields: ['ssn', 'creditCard'],
      excludePaths: ['/docs', '/swagger'],
      skipSanitization: process.env.NODE_ENV === 'development',
    }),
  );

  // Exception filters
  // app.useGlobalFilters(new CsrfExceptionFilter()); // kh√¥ng b·∫Øt ƒë∆∞·ª£c EBADCSRFTOKEN, c√≥ th·ªÉ b·ªè
  app.useGlobalFilters(new GlobalExceptionFilter());

  const port = process.env.PORT ?? 3000;
  console.log('Starting Nest HTTP listener...');
  await app.listen(port);
  console.log(`üöÄ Booking API is running on http://localhost:${port}`);
}
bootstrap();
