export type RenderEmail = { subject: string; html?: string; text?: string };
export type RenderInapp = { title: string; body?: string };
export type RenderPush = {
  title: string;
  body?: string;
  data?: Record<string, any>;
};

export type TemplateSpec = {
  key: string;
  renderEmail?: (ctx: any) => RenderEmail;
  renderInapp?: (ctx: any) => RenderInapp;
  renderPush?: (ctx: any) => RenderPush;
};

function esc(s: any) {
  return String(s ?? '').replace(
    /[<>&"]/g,
    (c) => ({ '<': '&lt;', '>': '&gt;', '&': '&amp;', '"': '&quot;' })[c]!,
  );
}

export const TEMPLATES: Record<string, TemplateSpec> = {
  review_reminder: {
    key: 'review_reminder',
    renderEmail: (ctx) => {
      const attempt = Number(ctx?.attempt ?? 1);
      const subject =
        attempt === 1
          ? `HoÃ n táº¥t Ä‘Ã¡nh giÃ¡ cho ${ctx?.propertyTitle || 'chá»— á»Ÿ cá»§a báº¡n'}`
          : `Nháº¯c láº¡i: báº¡n quÃªn Ä‘Ã¡nh giÃ¡ ${ctx?.propertyTitle || 'chá»— á»Ÿ'} ðŸ˜„`;
      const url = ctx?.reviewUrl || '#';
      const html = `
        <div>
          <p>ChÃ o báº¡n,</p>
          <p>Báº¡n vá»«a hoÃ n táº¥t chuyáº¿n á»Ÿ táº¡i <b>${esc(ctx?.propertyTitle || '')}</b>.
             HÃ£y Ä‘á»ƒ láº¡i Ä‘Ã¡nh giÃ¡ Ä‘á»ƒ giÃºp chá»§ nhÃ  vÃ  khÃ¡ch khÃ¡c nhÃ©.</p>
          <p><a href="${esc(url)}">Viáº¿t Ä‘Ã¡nh giÃ¡ ngay</a></p>
          <p>Cáº£m Æ¡n báº¡n!</p>
        </div>`;
      return { subject, html, text: `HÃ£y Ä‘Ã¡nh giÃ¡: ${url}` };
    },
    renderInapp: (ctx) => ({
      title: 'Nháº¯c Ä‘Ã¡nh giÃ¡ sau chuyáº¿n Ä‘i',
      body: `Báº¡n Ä‘Ã£ á»Ÿ xong táº¡i "${ctx?.propertyTitle || ''}". Nháº¥n Ä‘á»ƒ viáº¿t review.`,
    }),
    renderPush: (ctx) => ({
      title: 'Nháº¯c Ä‘Ã¡nh giÃ¡',
      body: `Báº¡n Ä‘Ã£ á»Ÿ xong táº¡i "${ctx?.propertyTitle || ''}".`,
      data: { action: 'open_review', bookingId: ctx?.bookingId },
    }),
  },

  generic_info: {
    key: 'generic_info',
    renderInapp: (ctx) => ({
      title: String(ctx?.title || 'ThÃ´ng bÃ¡o'),
      body: String(ctx?.body || ''),
    }),
    renderEmail: (ctx) => ({
      subject: String(ctx?.subject || 'ThÃ´ng bÃ¡o'),
      text: String(ctx?.text || ''),
    }),
    renderPush: (ctx) => ({
      title: String(ctx?.title || 'ThÃ´ng bÃ¡o'),
      body: String(ctx?.body || ''),
    }),
  },
};

export function getTemplate(key: string): TemplateSpec | null {
  return TEMPLATES[key] || null;
}
